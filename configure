#! /bin/sh
#
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize.
#
# Adapted from Zeek's wrapper.

# Defaults
cmake_build_directory="build"
cmake_build_type="RelWithDebInfo"
cmake_generator=""
cmake_install_prefix="/usr/local"
cmake_use_ccache="no"
cmake_spicy_root=""
cmake_ws_root=""
cmake_ws_include_directory=""
cmake_ws_plugin_directory=""
cmake_ws_use_personal_plugin_dir="no"

display_cmake=0
cache_entries=""

set -e
command="$0 $*"

cmake_exe="<no cmake>"
for i in cmake cmake3; do
    if which $i >/dev/null; then
        version="$($i --version 2>&1 | grep "cmake.*version" | awk -F '[ .]' '{print $3}')"
        test -n "${version}" && test "${version}" -ge 3 && cmake_exe=$(which $i)
        break
    fi
done

which "${cmake_exe}" > /dev/null 2>&1 || {
    echo "\
This package requires CMake >= 3, please install it first, then you may
use this configure script to access CMake equivalent functionality.\
" >&2;
    exit 1;
}

usage="\
Usage: $0 [OPTION]... [VAR=VALUE]...

  Build Options:
    --build-dir=DIR                     Place build files in directory [default: ${cmake_build_directory}]
    --build-type=TYPE                   Set build type (Debug,Release,RelWithDebInfo) [default: ${cmake_build_type}]
    --enable-ccache                     Build using the compiler cache cache if in PATH [default: ${cmake_use_ccache}]
    --enable-debug                      Compile debug version (same as --build-type=Debug) [default: off]
    --generator=<generator>             CMake generator to use (see cmake --help)
    --prefix=PATH                       Installation prefix [default: ${cmake_install_prefix}]

    --spicy-root=PATH                   Override Spicy root directory

    --wireshark-root=PATH               Override Wireshark root directory
    --wireshark-include-dir=PATH        Override Wireshark include directory
    --wireshark-plugin-dir=PATH         Override Wireshark plugin directory
    --wireshark-use-personal-plugin-dir Install plugin into Wireshark user's personal plugin directory

    --display-cmake                     Don't create build configuration, just output final CMake invocation
"
source_dir="$(cd "$(dirname "$0")" && pwd)"

# Function to append a CMake cache entry definition to the
# cmake_cache_entries variable.
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry () {
    if [ "$3" != "" ]; then
        cmake_cache_entries="${cmake_cache_entries} -D $1:$2=$3"
    fi
}

# parse arguments
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$1" in
        --build-dir=*)                          cmake_build_directory="${optarg}";;
        --build-type=*)                         cmake_build_type="${optarg}";;
        --enable-ccache)                        cmake_use_ccache="yes";;
        --enable-debug)                         cmake_build_type="Debug";;
        --generator=*)                          cmake_generator="${optarg}";;
        --prefix=*)                             cmake_install_prefix="${optarg}";;

        --spicy-root=*)                         cmake_spicy_root="${optarg}";;

        --wireshark-root=*)                     cmake_ws_root="${optarg}";;
        --wireshark-include-dir=*)              cmake_ws_include_directory="${optarg}";;
        --wireshark-plugin-dir=*)               cmake_ws_plugin_directory="${optarg}";;
        --wireshark-use-personal-plugin-dir)    cmake_ws_use_personal_plugin_dir="yes";;

        --display-cmake) display_cmake=1;;

        --help|-h) echo "${usage}" 1>&2 && exit 1;;
        *) echo "Invalid option '$1'.  Try $0 --help to see available options." && exit 1;;
    esac
    shift
done

# Set CMake cache options.
append_cache_entry CMAKE_BUILD_TYPE             STRING "${cmake_build_type}"
append_cache_entry CMAKE_INSTALL_PREFIX         PATH   "${cmake_install_prefix}"
append_cache_entry USE_CCACHE                   BOOL   "${cmake_use_ccache}"
append_cache_entry SPICY_ROOT_DIR               PATH   "${cmake_spicy_root}"
append_cache_entry WS_ROOT                      PATH   "${cmake_ws_root}"
append_cache_entry WS_INCLUDE_DIR               PATH   "${cmake_ws_include_directory}"
append_cache_entry WS_PLUGIN_DIR                PATH   "${cmake_ws_plugin_directory}"
append_cache_entry WS_USE_PERSONAL_PLUGIN_DIR   BOOL   "${cmake_ws_use_personal_plugin_dir}"

if [ -n "${cmake_generator}" ]; then
    cmake="${cmake_exe} -G '${cmake_generator}' ${cmake_cache_entries} ${source_dir}"
else
    cmake="${cmake_exe} ${cmake_cache_entries} ${source_dir}"
fi

if [ "${display_cmake}" = 1 ]; then
    echo "${cmake}"
    exit 0
fi

if [ ! -d ${cmake_build_directory} ]; then
    # Create build directory
    mkdir -p ${cmake_build_directory}
else
    # If build directory already exists, remove any pre-existing
    # CMake cache so that this configuration is not tainted by a
    # previous one
    rm -f ${cmake_build_directory}/CMakeCache.txt
fi

cd ${cmake_build_directory}
eval ${cmake} 2>&1 | tee config.log

echo "# This is the command used to configure this build" > config.status
echo ${command} >> config.status
chmod u+x config.status
