# @TEST-EXEC: spicyc -Qjd -L ${MODULE_PATH} -o echo.hlto %INPUT
# @TEST-EXEC: WIRESHARK_SPICY_MODULE_PATH=. tshark -r ${TRACES}/echo.pcap >>output 2>&1
# @TEST-EXEC: WIRESHARK_SPICY_MODULE_PATH=. tshark -r ${TRACES}/echo.pcap -O spicy_Echo >>output 2>&1
# @TEST-EXEC: btest-diff output

module Echo;

import Wireshark;

public type Request = unit {
    message: bytes &eod; # read all payload until end of data
};

public type Reply = unit {
    message: bytes &eod;
};

# Let Wireshark know about the dissector.
Wireshark::register_dissector([
    $name = "Echo Protocol",         # long, descriptive dissector name in Wireshark
    $short_name = "spicy_Echo",      # shorthand name for the dissector
    $mode = Wireshark::Mode::Packet, # dissect packets individually (common for UDP protocols)
    $ports = set(7/udp),             # well-known port to recognize the protocol
    $parser_orig = Echo::Request,    # type acting as entry point for client-side packets
    $parser_resp = Echo::Reply       # type acting as entry point for server-side packets
]);
